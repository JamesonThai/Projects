import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileNotFoundException;
import java.util.*;

/**
 * Calendar Class that that renders cell table
 * 
 * @author Jameson Thai Modified from:
 *         http://www.dreamincode.net/forums/topic/25042-creating-a-calendar-viewer-application/
 */
public class CalendarView2 {
	static JLabel lblMonth, lblYear, eventlblMonth, createName, createTimeS, createTimeE;
	static JButton btnPrev, btnNext, quit, create, save;
	static JTextArea out;
	static JTextArea in;
	static JTable tblCalendar;
	static JFrame frmMain;
	static Container pane;
	static DefaultTableModel mtblCalendar; // Table model
	static JScrollPane stblCalendar; // The scrollpane
	static JPanel pnlCalendar, eventList; // panel Calendar and eventListing
	static int realYear, realMonth, realDay, currentYear, currentMonth, currentDay, eventDate;
	static final int frameSizeX = 800;
	static final int frameSizeY = 475;
	static boolean instance = false;
	static String stemp;
	// static CalendarModel CalMod = new CalendarModel();
	static String currentDate;
	static JFrame frmMain2 = new JFrame("Create");
	static JLabel ending2 = new JLabel("To");
	static JLabel msg1 = new JLabel("Input Name:");
	static JLabel msg2 = new JLabel("Input Start Time");
	static JLabel msg3 = new JLabel("Input End Time");
	static JLabel msg4 = new JLabel("Time ex: 03:24");
	static JTextArea evenName = new JTextArea();
	static JTextArea eventStart = new JTextArea();
	static JTextArea eventEnd = new JTextArea();

	/**
	 * Prints textField in the Text Area
	 * 
	 * @param y
	 *            text to be printed
	 */
	public static void printTextField(String y) {

		out.setSelectedTextColor(Color.black);
		out.setText(y + "\n");
	}

	/**
	 * Refreshes the event List
	 * 
	 * @param s
	 *            Date in MM/DD/YY
	 * @param y
	 *            ArrayList of Events
	 */
	public static void refreshEventList(String s, ArrayList<Event> y) {
		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		stemp = "Date: " + months[currentMonth] + " " + eventDate + ", " + currentYear;
		out.setText(null);
		eventlblMonth.setText(stemp);
		if (SimpleCalendar.CalMod.checkEventDateExist(s) == true) {
			for (Event e : y) {
				String temp = e.getEventName() + ": " + e.getStartTimeS() + "-" + e.getEndTimeS();
				printTextField(temp);
			}
		}
	}

	/**
	 * Refreshes the Calendar
	 * 
	 * @param day
	 *            current Day
	 * @param month
	 *            current Month
	 * @param year
	 *            current Year
	 */
	public static void refreshCalendar(int day, int month, int year) {
		// Variables
		String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
				"October", "November", "December" };
		int nod, som; // Number Of Days, Start Of Month

		// Allow/disallow buttons
		btnPrev.setEnabled(true);
		btnNext.setEnabled(true);
		create.setEnabled(true);
		quit.setEnabled(true);
		if (month == 0 && year <= realYear - 10) {
			btnPrev.setEnabled(false);
		} // Too early
		if (month == 11 && year >= realYear + 100) {
			btnNext.setEnabled(false);
		} // Too late
		lblMonth.setText(months[month]); // Refresh the month label (at the top)
		lblMonth.setBounds(160 - lblMonth.getPreferredSize().width / 2, 25, 180, 25); // Re-align
																						// label
																						// with
																						// calendar

		// Clear table
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 7; j++) {
				mtblCalendar.setValueAt(null, i, j);
			}
		}

		// Get first day of month and number of days
		GregorianCalendar cal = new GregorianCalendar(year, month, 1);
		nod = cal.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
		som = cal.get(GregorianCalendar.DAY_OF_WEEK);

		// Draw calendar
		for (int i = 1; i <= nod; i++) {
			int row = new Integer((i + som - 2) / 7);
			int column = (i + som - 2) % 7;
			mtblCalendar.setValueAt(i, row, column);
		}

		// Apply renderers
		tblCalendar.setDefaultRenderer(tblCalendar.getColumnClass(0), new tblCalendarRenderer());
	}

	/**
	 * Making it into MM/DD/YY Format
	 * 
	 * @param eventDate2
	 *            date to be checked
	 * @param currentMonth2
	 *            month to be checked
	 * @param currentYear2
	 *            year to be Converted
	 * @return date
	 */
	public static String DateCheckerandConversion(int eventDate2, int currentMonth2, int currentYear2) {
		String tempDate;
		String tempMonth;
		String tempYear;
		if (eventDate2 < 10)
			tempDate = "0" + Integer.toString(eventDate2);
		else
			tempDate = Integer.toString(eventDate2);
		if (currentMonth2 < 10)
			tempMonth = "0" + Integer.toString(currentMonth2);
		else
			tempMonth = Integer.toString(currentMonth2);
		tempYear = Integer.toString(currentYear2).substring(2);
		return tempMonth + "/" + tempDate + "/" + tempYear;

	}

	/**
	 * Renders cells
	 * 
	 * @author Jameson Thai Modified from Citation Source above
	 *
	 */
	static class tblCalendarRenderer extends DefaultTableCellRenderer {
		public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
				int row, int column) {
			super.getTableCellRendererComponent(table, value, selected, focused, row, column);
			if (column == 0 || column == 6) { // Week-end
				setBackground(new Color(255, 220, 220));
			} else { // Week
				setBackground(new Color(255, 255, 255));
			}

			if (value != null) {
				if ((Integer.parseInt(value.toString()) == realDay && currentMonth == realMonth
						&& currentYear == realYear)) { // Today
					setBackground(new Color(220, 220, 255));
					instance = true;

				} else if (Integer.parseInt(value.toString()) == currentDay) {
					setBackground(Color.red);
					ArrayList temp = SimpleCalendar.CalMod.getEventForDay(currentDate);
					currentDate = DateCheckerandConversion(Integer.parseInt(value.toString()), currentMonth,
							currentYear);
					refreshEventList(currentDate, temp);
				} else if (selected) {
					setBackground(Color.yellow);
					ArrayList temp = SimpleCalendar.CalMod.getEventForDay(currentDate);
					currentDate = DateCheckerandConversion(Integer.parseInt(value.toString()), currentMonth,
							currentYear);
					refreshEventList(currentDate, temp);
				}
				eventDate = Integer.parseInt(value.toString()) + 1;
			}
			setBorder(null);
			setForeground(Color.black);
			return this;
		}
	}

}